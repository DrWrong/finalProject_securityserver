// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift_interface

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type SecureService interface {
	CommonService

	// Parameters:
	//  - CommonRequest
	//  - PlainText
	Encrypted(commonRequest *CommonRequest, plainText string) (r string, err error)
	// Parameters:
	//  - CommonRequest
	//  - CipherText
	//  - Key
	Decrypted(commonRequest *CommonRequest, cipherText string, key string) (r string, err error)
}

type SecureServiceClient struct {
	*CommonServiceClient
}

func NewSecureServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecureServiceClient {
	return &SecureServiceClient{CommonServiceClient: NewCommonServiceClientFactory(t, f)}
}

func NewSecureServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecureServiceClient {
	return &SecureServiceClient{CommonServiceClient: NewCommonServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - CommonRequest
//  - PlainText
func (p *SecureServiceClient) Encrypted(commonRequest *CommonRequest, plainText string) (r string, err error) {
	if err = p.sendEncrypted(commonRequest, plainText); err != nil {
		return
	}
	return p.recvEncrypted()
}

func (p *SecureServiceClient) sendEncrypted(commonRequest *CommonRequest, plainText string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("encrypted", thrift.CALL, p.SeqId)
	args35 := NewEncryptedArgs()
	args35.CommonRequest = commonRequest
	args35.PlainText = plainText
	err = args35.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *SecureServiceClient) recvEncrypted() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result36 := NewEncryptedResult()
	err = result36.Read(iprot)
	iprot.ReadMessageEnd()
	value = result36.Success
	return
}

// Parameters:
//  - CommonRequest
//  - CipherText
//  - Key
func (p *SecureServiceClient) Decrypted(commonRequest *CommonRequest, cipherText string, key string) (r string, err error) {
	if err = p.sendDecrypted(commonRequest, cipherText, key); err != nil {
		return
	}
	return p.recvDecrypted()
}

func (p *SecureServiceClient) sendDecrypted(commonRequest *CommonRequest, cipherText string, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("decrypted", thrift.CALL, p.SeqId)
	args39 := NewDecryptedArgs()
	args39.CommonRequest = commonRequest
	args39.CipherText = cipherText
	args39.Key = key
	err = args39.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *SecureServiceClient) recvDecrypted() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result40 := NewDecryptedResult()
	err = result40.Read(iprot)
	iprot.ReadMessageEnd()
	value = result40.Success
	return
}

type SecureServiceProcessor struct {
	*CommonServiceProcessor
}

func NewSecureServiceProcessor(handler SecureService) *SecureServiceProcessor {
	self43 := &SecureServiceProcessor{NewCommonServiceProcessor(handler)}
	self43.AddToProcessorMap("encrypted", &secureServiceProcessorEncrypted{handler: handler})
	self43.AddToProcessorMap("decrypted", &secureServiceProcessorDecrypted{handler: handler})
	return self43
}

type secureServiceProcessorEncrypted struct {
	handler SecureService
}

func (p *secureServiceProcessorEncrypted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewEncryptedArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("encrypted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewEncryptedResult()
	if result.Success, err = p.handler.Encrypted(args.CommonRequest, args.PlainText); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing encrypted: "+err.Error())
		oprot.WriteMessageBegin("encrypted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("encrypted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type secureServiceProcessorDecrypted struct {
	handler SecureService
}

func (p *secureServiceProcessorDecrypted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDecryptedArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("decrypted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDecryptedResult()
	if result.Success, err = p.handler.Decrypted(args.CommonRequest, args.CipherText, args.Key); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decrypted: "+err.Error())
		oprot.WriteMessageBegin("decrypted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("decrypted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type EncryptedArgs struct {
	CommonRequest *CommonRequest `thrift:"commonRequest,1"`
	PlainText     string         `thrift:"plainText,2"`
}

func NewEncryptedArgs() *EncryptedArgs {
	return &EncryptedArgs{}
}

func (p *EncryptedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EncryptedArgs) readField1(iprot thrift.TProtocol) error {
	p.CommonRequest = NewCommonRequest()
	if err := p.CommonRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CommonRequest)
	}
	return nil
}

func (p *EncryptedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.PlainText = v
	}
	return nil
}

func (p *EncryptedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encrypted_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *EncryptedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CommonRequest != nil {
		if err := oprot.WriteFieldBegin("commonRequest", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:commonRequest: %s", p, err)
		}
		if err := p.CommonRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CommonRequest)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:commonRequest: %s", p, err)
		}
	}
	return err
}

func (p *EncryptedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("plainText", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:plainText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PlainText)); err != nil {
		return fmt.Errorf("%T.plainText (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:plainText: %s", p, err)
	}
	return err
}

func (p *EncryptedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EncryptedArgs(%+v)", *p)
}

type EncryptedResult struct {
	Success string `thrift:"success,0"`
}

func NewEncryptedResult() *EncryptedResult {
	return &EncryptedResult{}
}

func (p *EncryptedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *EncryptedResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *EncryptedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encrypted_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *EncryptedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *EncryptedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EncryptedResult(%+v)", *p)
}

type DecryptedArgs struct {
	CommonRequest *CommonRequest `thrift:"commonRequest,1"`
	CipherText    string         `thrift:"cipherText,2"`
	Key           string         `thrift:"key,3"`
}

func NewDecryptedArgs() *DecryptedArgs {
	return &DecryptedArgs{}
}

func (p *DecryptedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DecryptedArgs) readField1(iprot thrift.TProtocol) error {
	p.CommonRequest = NewCommonRequest()
	if err := p.CommonRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CommonRequest)
	}
	return nil
}

func (p *DecryptedArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.CipherText = v
	}
	return nil
}

func (p *DecryptedArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *DecryptedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decrypted_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DecryptedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CommonRequest != nil {
		if err := oprot.WriteFieldBegin("commonRequest", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:commonRequest: %s", p, err)
		}
		if err := p.CommonRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CommonRequest)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:commonRequest: %s", p, err)
		}
	}
	return err
}

func (p *DecryptedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cipherText", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:cipherText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CipherText)); err != nil {
		return fmt.Errorf("%T.cipherText (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:cipherText: %s", p, err)
	}
	return err
}

func (p *DecryptedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *DecryptedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecryptedArgs(%+v)", *p)
}

type DecryptedResult struct {
	Success string `thrift:"success,0"`
}

func NewDecryptedResult() *DecryptedResult {
	return &DecryptedResult{}
}

func (p *DecryptedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DecryptedResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *DecryptedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decrypted_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DecryptedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *DecryptedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecryptedResult(%+v)", *p)
}
